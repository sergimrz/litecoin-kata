/* groovylint-disable UnnecessaryGString */
application = "litecoin-kata"
imageDev = "${application}-dev:${BUILD_NUMBER}"
imageProd = "${application}:${BUILD_NUMBER}"

pipeline {
    agent any
    stages {
        stage('Clone') {
            steps {
                git 'https://github.com/sergimrz/litecoin-kata.git'
            }
        }
        stage('Build dev image') {
            steps {
                sh "docker build . -t ${imageDev}"
                sh "curl -s https://ci-tools.anchore.io/inline_scan-v0.6.0 | bash -s -- -r ${imageDev}"
                // push to registry: docker push ${registry}/${imageDev}
            }
        }
        // Use kustomize to generate the dev version.
        // It modifies the kustomization file with the recently generated version.
        // Is not the best idea split the environments just by namespaces.
        stage('Deploy dev image') {
            steps {
                sh "yq -i '.images[0].newTag = \"${BUILD_NUMBER}-dev\"' kubernetes/overlays/dev/kustomization.yaml"
                // Ideally, we should push the file and let argocd or another orchestrator
                // detect the changes in kubernetes templates and apply it to keep an IAC approach
                // As we didn't connected the local minikube to the Jenkins so we can't do the apply right now
                sh "kubectl kustomize kubernetes/overlays/dev/"
            }
        }
        // Locate here the testing on the image deployed in dev.
        // End to end testing, acceptance tests, performance tests...
        stage('Testing') {
            steps {
                sh "echo 'Here we should test the image'"
            }
        }
        stage('Promote image') {
            steps {
                sh "docker tag ${imageDev} ${imageProd}"
                // push to registry: docker push ${registry}/${imageProd}
            }
        }
        // Use kustomize to generate the prod version.
        stage('Deploy live') {
            steps {
                sh "yq -i '.images[0].newTag = \"${BUILD_NUMBER}\"' kubernetes/overlays/prod/kustomization.yaml"
                // Ideally, we should push the file and let argocd or another orchestrator
                // detect the changes in kubernetes templates and apply it to keep an IAC approach
                //sh "kubectl apply -k kubernetes/overlays/prod/"
                // As we didn't connected the local minikube to the Jenkins so we can't do the apply right now
                sh "kubectl kustomize kubernetes/overlays/prod/"
            }
        }
    }
    post {
        // Store anchore reports as artifacts
        always {
            archiveArtifacts artifacts: 'anchore-reports/**', fingerprint: true
        }
    }
}
